// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -Onone -module-name Passbase
import AVFoundation
import AVKit
import CoreGraphics
import CoreText
import Foundation
import Microblink
import MobileCoreServices
@_exported import Passbase
import QuartzCore
import Swift
import UIKit
import ZoomAuthentication
public typealias LottieCompletionBlock = (Swift.Bool) -> Swift.Void
extension UIResponder {
  public var parentViewController: UIKit.UIViewController? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PassbaseButton : UIKit.UIButton {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func awakeAfter(using aDecoder: Foundation.NSCoder) -> Any?
  @objc override dynamic public func awakeFromNib()
  public func customize(mainButtonColor: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FloatValueProvider : Passbase.AnyValueProvider {
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
extension Color : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol AnyValueProvider {
  var valueType: Any.Type { get }
  func hasUpdate(frame: Passbase.AnimationFrameTime) -> Swift.Bool
  func value(frame: Passbase.AnimationFrameTime) -> Any
}
@_hasMissingDesignatedInitializers public class FilepathImageProvider : Passbase.AnimationImageProvider {
  public func imageForAsset(asset: Passbase.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
public struct AnimationKeypath {
}
extension PBAnimation {
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: Passbase.AnimationCacheProvider? = nil) -> Passbase.PBAnimation?
  public static func filepath(_ filepath: Swift.String, animationCache: Passbase.AnimationCacheProvider? = nil) -> Passbase.PBAnimation?
  public typealias DownloadClosure = (Passbase.PBAnimation?) -> Swift.Void
  public static func loadedFrom(url: Foundation.URL, closure: @escaping Passbase.PBAnimation.DownloadClosure, animationCache: Passbase.AnimationCacheProvider?)
  final public func progressTime(forMarker named: Swift.String) -> Passbase.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> Passbase.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: Passbase.AnimationFrameTime) -> Passbase.AnimationProgressTime
  final public func frameTime(forProgress progressTime: Passbase.AnimationProgressTime) -> Passbase.AnimationFrameTime
  final public func time(forFrame frameTime: Passbase.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> Passbase.AnimationFrameTime
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreGraphics.CGRect {
    get
  }
  final public var size: CoreGraphics.CGSize {
    get
  }
}
extension CALayer {
  public func logLayerTree(withIndent: Swift.Int = 0)
}
public enum ColorFormatDenominator {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: Passbase.ColorFormatDenominator, b: Passbase.ColorFormatDenominator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Color {
}
@_hasMissingDesignatedInitializers @objc final public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class CompatibleAnimationView : UIKit.UIView {
  @objc override final public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LottieView : UIKit.UIView {
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  public static func == (a: Passbase.LottieBackgroundBehavior, b: Passbase.LottieBackgroundBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum LottieLoopMode {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
}
extension LottieLoopMode : Swift.Equatable {
  public static func == (lhs: Passbase.LottieLoopMode, rhs: Passbase.LottieLoopMode) -> Swift.Bool
}
public enum CoordinateSpace : Swift.Int, Swift.Codable {
  case type2d
  case type3d
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
final public class PBAnimation : Swift.Codable {
  final public let startFrame: Passbase.AnimationFrameTime
  final public let endFrame: Passbase.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LRUAnimationCache : Passbase.AnimationCacheProvider {
  public func clearCache()
  public func animation(forKey: Swift.String) -> Passbase.PBAnimation?
  public func setAnimation(_ animation: Passbase.PBAnimation, forKey: Swift.String)
  @objc deinit
}
public typealias AnimationFrameTime = CoreGraphics.CGFloat
public typealias AnimationProgressTime = CoreGraphics.CGFloat
@_hasMissingDesignatedInitializers final public class GradientValueProvider : Passbase.AnyValueProvider {
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
public class Asset : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PointValueProvider : Passbase.AnyValueProvider {
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : Passbase.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers open class AnimatedControl : UIKit.UIControl {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  open func animationDidSet()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol AnimationTextProvider : AnyObject {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
@_hasMissingDesignatedInitializers final public class DictionaryTextProvider : Passbase.AnimationTextProvider {
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultTextProvider : Passbase.AnimationTextProvider {
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BundleImageProvider : Passbase.AnimationImageProvider {
  public func imageForAsset(asset: Passbase.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
public protocol PassbaseDelegate : AnyObject {
  func didCompletePassbaseVerification(authenticationKey: Swift.String)
  func didCancelPassbaseVerification()
  func didStartPassbaseVerification()
}
@objc @_inheritsConvenienceInitializers public class Passbase : UIKit.UIViewController {
  weak public static var delegate: Passbase.PassbaseDelegate?
  public static var additionalAttributes: [Swift.String : Swift.String]?
  public static var prefillUserEmail: Swift.String?
  public static var source: Swift.Int
  weak public static var button: Passbase.PassbaseButton?
  public static func initialize(publishableApiKey: Swift.String)
  public static func startVerification(from: UIKit.UIViewController) throws
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension UIViewController {
  public func getStartProgress(screenId: Swift.Float) -> Swift.Float
  public func getEndProgress(screenId: Swift.Float) -> Swift.Float
}
extension UIColor {
  convenience public init(_ hexString: Swift.String?)
  convenience public init(hexString: Swift.String?, alpha: Swift.Float = 1.0)
}
extension UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
extension _NSRange {
  public init(range: Swift.Range<Swift.String.Index>, in string: Swift.String)
  public init(range: Swift.ClosedRange<Swift.String.Index>, in string: Swift.String)
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public typealias CXEMovieMakerCompletion = (Foundation.URL) -> Swift.Void
@objc public class CXEImagesToVideo : ObjectiveC.NSObject {
  public class func videoSettings(codec: Swift.String, width: Swift.Int, height: Swift.Int) -> [Swift.String : Any]
  public init(videoSettings: [Swift.String : Any])
  public func createMovieFrom(urls: [Foundation.URL], withCompletion: @escaping Passbase.CXEMovieMakerCompletion)
  public func createMovieFrom(images: [UIKit.UIImage], withCompletion: @escaping Passbase.CXEMovieMakerCompletion)
  @objc override dynamic public init()
  @objc deinit
}
extension Vector1D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Vector3D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Vector3D {
  public var pointValue: CoreGraphics.CGPoint {
    get
  }
  public var sizeValue: CoreGraphics.CGSize {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class AnimationSubview : UIKit.UIView {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers final public class SizeValueProvider : Passbase.AnyValueProvider {
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
public protocol AnimationImageProvider {
  func imageForAsset(asset: Passbase.ImageAsset) -> CoreGraphics.CGImage?
}
@_hasMissingDesignatedInitializers @objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
public struct Vector1D {
}
public struct Vector3D {
}
@_hasMissingDesignatedInitializers final public class ColorValueProvider : Passbase.AnyValueProvider {
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
extension UIColor {
  public var lottieColorValue: Passbase.Color {
    get
  }
}
public protocol AnimationCacheProvider {
  func animation(forKey: Swift.String) -> Passbase.PBAnimation?
  func setAnimation(_ animation: Passbase.PBAnimation, forKey: Swift.String)
  func clearCache()
}
extension Passbase.ColorFormatDenominator : Swift.Equatable {}
extension Passbase.ColorFormatDenominator : Swift.Hashable {}
extension Passbase.LottieBackgroundBehavior : Swift.Equatable {}
extension Passbase.LottieBackgroundBehavior : Swift.Hashable {}
extension Passbase.CoordinateSpace : Swift.Equatable {}
extension Passbase.CoordinateSpace : Swift.Hashable {}
extension Passbase.CoordinateSpace : Swift.RawRepresentable {}
extension Passbase.LayerType : Swift.Equatable {}
extension Passbase.LayerType : Swift.Hashable {}
extension Passbase.LayerType : Swift.RawRepresentable {}
extension Passbase.MatteType : Swift.Equatable {}
extension Passbase.MatteType : Swift.Hashable {}
extension Passbase.MatteType : Swift.RawRepresentable {}
extension Passbase.BlendMode : Swift.Equatable {}
extension Passbase.BlendMode : Swift.Hashable {}
extension Passbase.BlendMode : Swift.RawRepresentable {}
