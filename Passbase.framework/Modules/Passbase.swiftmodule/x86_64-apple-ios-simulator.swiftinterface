// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -Onone -module-name Passbase
import AVFoundation
import AVKit
import Foundation
import Lottie
import Microblink
import MobileCoreServices
@_exported import Passbase
import Swift
import UIKit
import ZoomAuthentication
extension UIResponder {
  public var parentViewController: UIKit.UIViewController? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PassbaseButton : UIKit.UIButton {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func awakeAfter(using aDecoder: Foundation.NSCoder) -> Any?
  @objc override dynamic public func awakeFromNib()
  public func customize(mainButtonColor: Swift.String)
  @objc deinit
}
public protocol PassbaseDelegate : AnyObject {
  func didCompletePassbaseVerification(authenticationKey: Swift.String)
  func didCancelPassbaseVerification()
}
@objc @_inheritsConvenienceInitializers public class Passbase : UIKit.UIViewController {
  weak public static var delegate: Passbase.PassbaseDelegate?
  public static var additionalAttributes: [Swift.String : Swift.String]?
  public static var prefillUserEmail: Swift.String?
  public static var userEmail: Swift.String?
  public static var source: Swift.Int
  weak public static var button: Passbase.PassbaseButton!
  public static func initialize(publishableApiKey: Swift.String)
  public static func startVerification(from: UIKit.UIViewController) throws
  public static func haptic(style: UIKit.UIImpactFeedbackGenerator.FeedbackStyle? = .light)
  public static func isUITesting() -> Swift.Bool
  public static func shouldDisableTimer() -> Swift.Bool
  public static func saveDocuments(array: [Swift.String])
  public static func saveCustomization(json: [Swift.String : Swift.AnyObject]?)
  public static func composeAnimationName(name: Swift.String) -> Swift.String
  public static func initZoom()
  public static func changeZoomLocalization()
  public static func deinitZoom()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension UIViewController {
  public func getStartProgress(screenId: Swift.Float) -> Swift.Float
  public func getEndProgress(screenId: Swift.Float) -> Swift.Float
}
extension UIColor {
  convenience public init(_ hexString: Swift.String?)
  convenience public init(hexString: Swift.String?, alpha: Swift.Float = 1.0)
}
extension _NSRange {
  public init(range: Swift.Range<Swift.String.Index>, in string: Swift.String)
  public init(range: Swift.ClosedRange<Swift.String.Index>, in string: Swift.String)
}
public typealias CXEMovieMakerCompletion = (Foundation.URL) -> Swift.Void
@objc public class CXEImagesToVideo : ObjectiveC.NSObject {
  public class func videoSettings(codec: Swift.String, width: Swift.Int, height: Swift.Int) -> [Swift.String : Any]
  public init(videoSettings: [Swift.String : Any])
  public func createMovieFrom(urls: [Foundation.URL], withCompletion: @escaping Passbase.CXEMovieMakerCompletion)
  public func createMovieFrom(images: [UIKit.UIImage], withCompletion: @escaping Passbase.CXEMovieMakerCompletion)
  @objc override dynamic public init()
  @objc deinit
}
